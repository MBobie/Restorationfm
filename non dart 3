import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:image_picker/image_picker.dart';
import 'package:audioplayers/audioplayers.dart';
import 'dart:io';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter_sound/flutter_sound.dart';
import 'package:path_provider/path_provider.dart';

void main() {
  runApp(const RadioApp());
}

class RadioApp extends StatelessWidget {
  const RadioApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Restoration FM',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final AudioPlayer _audioPlayer = AudioPlayer();
  final String _streamUrl = "http://stream.zeno.fm/0nuc8rr51tzuv"; // Streaming URL
  bool _isPlaying = false;
  int _unreadMessages = 0;

  Future<void> _openUrl(String url) async {
    if (await canLaunchUrl(Uri.parse(url))) {
      await launchUrl(Uri.parse(url), mode: LaunchMode.externalApplication);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Could not launch $url')),
      );
    }
  }

  void _incrementUnreadMessages() {
    setState(() {
      _unreadMessages++;
    });
  }

  void _clearUnreadMessages() {
    setState(() {
      _unreadMessages = 0;
    });
  }

  Future<void> _togglePlayPause() async {
    if (_isPlaying) {
      await _audioPlayer.pause();
      setState(() {
        _isPlaying = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Stream paused')),
      );
    } else {
      await _audioPlayer.play(UrlSource(_streamUrl));
      setState(() {
        _isPlaying = true;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Stream playing')),
      );
    }
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Image.network(
              'https://i.imgur.com/kt5CZ2Q.png',
              height: 50,
              width: 50,
            ),
            const SizedBox(width: 10),
            const Text('Restoration FM'),
          ],
        ),
        leading: Builder(
          builder: (context) {
            return IconButton(
              icon: const Icon(Icons.menu),
              onPressed: () {
                Scaffold.of(context).openDrawer();
              },
            );
          },
        ),
        actions: [
          IconButton(
            icon: Image.network(
              'https://i.imgur.com/AythM1O.png',
              height: 30,
              width: 40,
            ),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) =>
                        ChatRoom(onNewMessage: _incrementUnreadMessages)),
              );
            },
          ),
          IconButton(
            icon: Image.network(
              'https://i.imgur.com/bO8MSeT.png',
              height: 24,
              width: 24,
            ),
            onPressed: () => _openUrl("https://wa.me/233247080473"),
          ),
          Stack(
            children: [
              IconButton(
                icon: const Icon(Icons.notifications),
                onPressed: () {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Notifications cleared')),
                  );
                  _clearUnreadMessages();
                },
              ),
              if (_unreadMessages > 0)
                Positioned(
                  right: 11,
                  top: 11,
                  child: Container(
                    padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    constraints: const BoxConstraints(
                      minWidth: 16,
                      minHeight: 16,
                    ),
                    child: Text(
                      '$_unreadMessages',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
            ],
          ),
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Share clicked')),
              );
            },
          ),
        ],
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: BoxDecoration(
                image: DecorationImage(
                  image: NetworkImage('https://i.imgur.com/EKYwmQQ.png'),
                  fit: BoxFit.cover,
                  alignment: Alignment.center,
                ),
              ),
              child: Center(
                child: Image.network(
                  'https://i.imgur.com/sj1lufZ.png',
                  fit: BoxFit.contain,
                ),
              ),
            ),
            ListTile(
              leading: const Icon(Icons.radio, color: Colors.orange),
              title: const Text('On Air'),
              onTap: () => _openUrl("https://www.restorationfm.com"),
            ),
            ListTile(
              leading: const Icon(Icons.book, color: Colors.green),
              title: const Text('Bible'),
              onTap: () => _openUrl(
                  "https://play.google.com/store/apps/details?id=com.flawlessconcepts.mvb_bible"),
            ),
          ],
        ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              _isPlaying ? 'Now Playing: Restoration FM Live' : 'Paused',
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            IconButton(
              icon: Icon(
                _isPlaying
                    ? Icons.pause_circle_filled
                    : Icons.play_circle_filled,
                size: 50,
                color: Colors.blue,
              ),
              onPressed: _togglePlayPause,
            ),
          ],
        ),
      ),
    );
  }
}

class ChatRoom extends StatefulWidget {
  final VoidCallback onNewMessage;

  const ChatRoom({super.key, required this.onNewMessage});

  @override
  _ChatRoomState createState() => _ChatRoomState();
}

class _ChatRoomState extends State<ChatRoom> {
  final TextEditingController _messageController = TextEditingController();
  final List<Map<String, String>> _messages = [];
  String? _userName;
  String? _phoneNumber;
  String _userImageUrl = 'https://via.placeholder.com/150';

  void _pickMedia(ImageSource source, String mediaType) async {
    final picker = ImagePicker();
    XFile? file;

    if (mediaType == 'image') {
      file = await picker.pickImage(source: source);
    } else if (mediaType == 'video') {
      file = await picker.pickVideo(source: source);
    }

    if (file != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('$mediaType selected: ${file.path}')),
      );
    }
  }

  void _recordVoice() async {
    final status = await Permission.microphone.request();
    if (status.isGranted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Voice recording not implemented yet')),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Microphone permission denied')),
      );
    }
  }

  void _sendMessage() {
    if (_messageController.text.isNotEmpty) {
      setState(() {
        _messages.add({
          'name': _userName ?? 'Anonymous',
          'phone': _phoneNumber ?? 'Unknown',
          'message': _messageController.text,
          'image': _userImageUrl,
        });
        _messageController.clear();
      });

      widget.onNewMessage();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Chatroom')),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                final message = _messages[index];
                return ListTile(
                  leading: CircleAvatar(
                    backgroundImage: message['image']!.startsWith('http')
                        ? NetworkImage(message['image']!)
                        : FileImage(File(message['image']!)) as ImageProvider,
                  ),
                  title: Text('${message['name']} (${message['phone']})'),
                  subtitle: Text(message['message']!),
                );
              },
            ),
          ),
          Row(
            children: [
              Expanded(
                child: TextField(controller: _messageController),
              ),
              IconButton(
                icon: const Icon(Icons.image),
                onPressed: () => _pickMedia(ImageSource.gallery, 'image'),
              ),
              IconButton(
                icon: const Icon(Icons.videocam),
                onPressed: () => _pickMedia(ImageSource.camera, 'video'),
              ),
              IconButton(
                icon: const Icon(Icons.mic),
                onPressed: _recordVoice,
              ),
              IconButton(
                icon: const Icon(Icons.send),
                onPressed: _sendMessage,
              ),
            ],
          ),
        ],
      ),
    );
  }
}
